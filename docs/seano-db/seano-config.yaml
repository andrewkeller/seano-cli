---
# seano-config.yaml
# seano configuration file
#
# This file is used both as a configuration for seano, and as a foundation for
# the big fat Json file you get after running a seano query.  Any keys you set
# here will show up in the root object of a query result, and may be consumed
# by any views you're using to make presentable release notes.

# Localized name of project:
project_name:
  en-US: Zarf

# Completely replace the note template for new notes in Zarf:
seano_note_template_contents: |
  ---
  # This is the template for new seano notes in Zarf.
  #
  # - Go down this document, filling in the details, and deleting the
  #   instructional comments.
  #
  # - Commit this file along side the rest of your change.
  #
  # - Other keys do exist that can be set here.  For more details, see:
  #   ``zarf/docs/seanoViews.rst``


  # (Required) Risk level: one of `low`, `medium`, or `high`.  Roughly
  # corresponds to how many people must be paying attention during deployment
  # of the top-level project that gets shipped to customers.  Since Zarf is
  # primarily a build system, very little of the risk exposure area is
  # customer-facing, making the risk level of almost all Zarf changes "low".
  risk: low

  # (Recommended) List of JIRA tickets is optional, but a lack of a ticket can
  # mess with velocity analytics in some projects.
  tickets:
  - URL to JIRA ticket

  # (Required) Short release note, not visible to CE customers:
  # - The first bullet of this hlist is used as a heading for this change in
  #   most views.
  # - To help have a unified voice despite different authors, use imperative
  #   tense (such as "Cook the bacon"), without a period at the end.
  # - Because Zarf is a submodule, you should assume this note will be dropped
  #   into some random other project at CE.  Phrase this note so that it
  #   doesn't become confusing when intermixed with other unrelated release
  #   notes in another project.
  # - Duplicate release note lines are squashed together in most views, so
  #   sometimes being a little vague can be good.
  employee-short-loc-hlist-rst:
    en-US:
    - Short sentence explaining this change to CE employees
    - "An ``hlist`` is a hierarchical list:":
      - which means you can nest bullets
      - but you sometimes have to quote whole lines to make YAML happy

  # (Optional) Long-form technical discussion aimed at other developers:
  employee-technical-loc-rst:
    en-US: |
      You are talking to developers on other teams.

      This field is a single large reStructuredText blob.  It can be short,
      or it can be long.  Food for thought:

      #. What was the problem?
      #. What solutions did you reject?
      #. Why did you choose this solution?
      #. What are the most obvious things that can go wrong?
      #. What do your coworkers on other teams need to know to troubleshoot
         an issue?
      #. What do your coworkers on other teams need to know to be able to
         make future changes in the affected code here?

  # (Optional) Long-form technical discussion aimed at Member Care:
  mc-technical-loc-rst:
    en-US: |
      You are talking to a Tier-2 Member Care Representative (a "T2").

      This field is a single large reStructuredText blob.  It can be short,
      or it can be long.  Food for thought:

      #. T2's have a dedicated block of time for catching up on release notes
         for all products at CE.  They oversee many products, so we try to keep
         this section as focused and brief as is practical.

      #. Being too short is better than being too long.  Some T2's aren't
         afraid to hop over to the ``employee-technical-loc-rst`` section to
         look for more details.

      #. Not all changes have impact to Member Care.  You may drop this entire
         section from this note if there is nothing useful to say.

      #. Assume that it's Saturday, and something is actively going wrong right
         now.  What should MC do to manage the issue on their own before
         developers are available on Monday?

  # (Required) Long-form technical discussion aimed at QA:
  qa-technical-loc-rst:
    en-US: |
      You are talking to QA.

      This field is a single large reStructuredText blob.  It can be short,
      or it can be long.  Food for thought:

      #. Assume that QA has zero knowledge of *what* to test, but that given
         that knowledge, they know *how* to test it.

      #. Be specific in what to test; avoid generalizations when practical.

      #. Be as technical as you want.  If QA has questions, they'll ask you.

      #. Assume this note was dropped into some other project when Zarf was
         fast-forwarded.  Given what changed, what is the impact to the
         product?  What needs to be regression-tested?

      #. Unlike a typical top-level project, not all changes in Zarf have
         QA-facing impact to the shippable products.  However, the QA Notes
         view, which QA uses to view this section, is forceful about wanting a
         QA Notes section for all notes...  And if you just delete this
         section, QA will know.  Instead, explain why this change does not
         need any QA performed.
