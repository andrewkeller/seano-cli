#!/usr/bin/env python
"""
seano
CE (release) Notes
Interrogates and manipulates a CE Release Notes (seano) database.
"""

from pyseano.cmd import *
import argparse
import logging
import os

log = logging.getLogger(__name__)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', '-v', action='count', default=0, help='Increase verbosity level')
    subparsers = parser.add_subparsers(help='verb')

    SEANO_DB_ARGS = ['--db']
    SEANO_DB_KWARGS = dict(action='store',
                          default=os.environ.get('SEANO_DB_PATH', ''),
                          help='The path to the database; overrides the SEANO_DB_PATH environment variable if set')

    subparser = subparsers.add_parser('init', help='Initialize a new release notes database')
    subparser.set_defaults(func=make_new_release_notes_db)
    subparser.add_argument(*SEANO_DB_ARGS, **SEANO_DB_KWARGS)

    subparser = subparsers.add_parser('new', help='Create a new release note and edit it')
    subparser.set_defaults(func=make_new_release_note)
    subparser.add_argument(*SEANO_DB_ARGS, **SEANO_DB_KWARGS)

    subparser = subparsers.add_parser('edit', help='Identifies and edits the latest created relase note')
    subparser.set_defaults(func=edit_latest_release_note)
    subparser.add_argument(*SEANO_DB_ARGS, **SEANO_DB_KWARGS)

    subparser = subparsers.add_parser('hash', help='Returns an arbitrary string that changes with all database '+
                                      'modifications; used by build systems to properly support incremental builds')
    subparser.set_defaults(func=hash_release_notes_db)
    subparser.add_argument(*SEANO_DB_ARGS, **SEANO_DB_KWARGS)

    subparser = subparsers.add_parser('query', help='Compiles release notes from the given database')
    subparser.set_defaults(func=query_release_notes)
    subparser.add_argument(*SEANO_DB_ARGS, **SEANO_DB_KWARGS)
    subparser.add_argument('--out', action='store', required=True, help='Output file; use a single hyphen for stdout')

    subparser = subparsers.add_parser('rekey', help='Move an existing note a new ID')
    subparser.set_defaults(func=rekey_release_note)
    subparser.add_argument(*SEANO_DB_ARGS, **SEANO_DB_KWARGS)
    subparser.add_argument('uid', action='store', help='The ID of the note you want to re-key')

    ns = parser.parse_args()

    logging.basicConfig(level=
        {
            0 : logging.INFO,
            1 : logging.DEBUG,
        }.get(
            min(max(ns.verbose, 0), 1)
        ))

    log.debug('Arguments: %s', ns)

    kwargs = dict(vars(ns))
    del kwargs['func']
    del kwargs['verbose']
    ns.func(**kwargs)


if __name__ == '__main__':
    main()
